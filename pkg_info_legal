#!/bin/bash
RPM_LIST_PATH=$1
SPECFILE_PATH=$2
NARROW_PKG_NAME=$3

DEBUG=0

function debug {
	if [[ $DEBUG == 1 ]]; then
		echo -e $1
	fi
}


while IFS= read -r l; do

	# Skip if is empty line
	[ -z "$l" ] && continue
	
	NAME_WITH_VERSION=$(echo $l | sed 's/\s.*$//')
	NAME=$(./package_name_parser $NAME_WITH_VERSION)
	debug "\n------\nname=$NAME"

	# Test: limit to the package name want to be tested
	if [ ! -z $NARROW_PKG_NAME ] && [ $NAME != $NARROW_PKG_NAME ]; then
		continue
	fi

	#Skip modules.yaml
	[ "$NAME" == "modules.yaml" ] && continue

	builddep="no"
	debug "command: ./define_dependency $NAME $SPECFILE_PATH BuildRequires"
	if ./define_dependency $NAME $SPECFILE_PATH BuildRequires; then
		#Is BuildRequires
		builddep="Build"
	fi

	runtimedep="no"
	debug "command: ./define_dependency $NAME $SPECFILE_PATH Requires"
	if ./define_dependency $NAME $SPECFILE_PATH Requires; then
		#Is Requires
		runtimedep="Runtime"
	fi


	DNF_INFO=$(dnf info $NAME)
	debug "dnf_info:"
	debug "$DNF_INFO"

	# Skip if found more than 2 lines
	count=$(echo "$DNF_INFO" | grep -o -i "License      : " | wc -l)
	debug "num_of_results=$count"
	if [ $count -ge 2 ]; then
		echo "package \"$NAME\" is already released by oracle. skipping." 
		continue
	fi

	DNF_INFO_ARR=($(echo "$DNF_INFO" | grep "License      : \|URL          : "))
	#debug "${DNF_INFO_ARR[@]}" #doesn't work

	# Skip if can't find package
	if [ "${DNF_INFO_ARR[0]}" == "Error:" ]; then
		continue
	fi


	URL=${DNF_INFO_ARR[2]}
	debug "url=$URL"
	LICENSE=${DNF_INFO_ARR[@]:5}
	debug "license=$LICENSE"
	debug ${#LICENSE}
	debug "$(echo $LICENSE | od -c)"

	#echo -e "$NAME\t$LICENSE\t$URL\t$builddep\t$runtimedep"
	row_format='%-60s %-28s %s  %-6s %-8s\n'
	printf "$row_format" "$NAME" "$LICENSE" "$URL" "$builddep" "$runtimedep"
                                                                                                                                                                                                       
done < <(cat $RPM_LIST_PATH)
