#!/bin/bash

#############################################################################################################
# 1. Take  a expanded spec file and grep by one of the dependency statement (BuildRequires/Requires)
# 2. Take the dependency statement to look up dnf to get the actual pkg_name
# 3. Look up pkg_name rpm list from a repo to see if the package name is in there
# 3. Run "dnf info pkg_name" to get license and upstream source
# 4. Generate a report of:
#    PKG_NAME   LICENSE  UPSTREAM_SOURCE   BUILDREQUIRES/REQUIRES
#############################################################################################################


SPECFILE=$1
REQTYPE=$2
RPM_LIST=$3

DEBUG=0
INFO=0

function debug {
	if [[ $DEBUG == 1 ]]; then
		echo -e $1
	fi
}

function info {
	if [[ $INFO == 1 ]]; then
		echo -e $1
	fi
}


#
#
#
if [ -z $SPECFILE ] || [ -z $REQTYPE ] || [ -z $RPM_LIST ]; then
	echo "[ERROR] usage: define_dependency_v2 PATH_TO_SPECFILE BuildRequires/Requires PATH_TO_RPM_LIST"
	exit
fi


rpm_list=$(cat $RPM_LIST)

while IFS= read -r l; do
	arr_require_statement=($l)
	debug "\n------\n$REQTYPE dependency from spec file: ${arr_require_statement[1]}"
	debug "command: dnf provides \"${arr_require_statement[1]}\""
	while IFS= read -r ll; do
		debug $ll
		if [[ $ll = Last* ]]; then
			debug "skipping line: $ll"
			continue
		fi
		pkgname_with_ver=$(echo "$ll" | sed 's/\s.*$//')
		debug "pkgname_with_ver=$pkgname_with_ver"
		pkgname=$(./package_name_parser $pkgname_with_ver)
		break
	done < <(dnf provides ${arr_require_statement[1]})

	found_match=false
	while IFS= read -r ll; do
		#debug "$ll"
		pkgname_with_ver_from_file=$(echo "$ll" | sed 's/\s.*$//')
		pkgname_from_file=$(./package_name_parser $pkgname_with_ver_from_file)
		#debug "pkgname_from_file: $pkgname_from_file"

		#Skip modules.yaml
		[ "$NAME" == "modules.yaml" ] && continue

		if [ "$pkgname_from_file" == "$pkgname" ]; then
			found_match=true
			break
		fi
	done < <(printf '%s\n' "$rpm_list")
	if $found_match; then
		info "Dependency: ${arr_require_statement[1]},\t found $REQTYPE dependency $pkgname"
		
		DNF_INFO=$(dnf info $pkgname)
        	debug "dnf_info:"
        	debug "$DNF_INFO"

        	# Skip if found more than 2 lines
        	count=$(echo "$DNF_INFO" | grep -o -i "License      : " | wc -l)
        	debug "num_of_results=$count"
        	if [ $count -ge 2 ]; then
                	echo "package \"$pkgname\" is already released by oracle. skipping." 
                	continue
        	fi

        	DNF_INFO_ARR=($(echo "$DNF_INFO" | grep "License      : \|URL          : "))
        	#debug "${DNF_INFO_ARR[@]}" #doesn't work

        	# Skip if can't find package
        	if [ "${DNF_INFO_ARR[0]}" == "Error:" ]; then
                	continue
        	fi


        	URL=${DNF_INFO_ARR[2]}
        	debug "url=$URL"
        	LICENSE=${DNF_INFO_ARR[@]:5}
        	debug "license=$LICENSE"
        	debug ${#LICENSE}
        	debug "$(echo $LICENSE | od -c)"

        	row_format='%-60s %-28s %s  %-8s\n'
        	printf "$row_format" "$pkgname" "$LICENSE" "$URL" "$REQTYPE"	

	else
		info "Dependency: ${arr_require_statement[1]},\t dnf provides: $pkgname. can't find match from rpm list."
	fi
	
done < <(rpmspec -P $SPECFILE | grep ^$REQTYPE)
